/**
 * generated by Xtext 2.25.0
 */
package robLANG_ASOS.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import robLANG_ASOS.Block;
import robLANG_ASOS.FunDefinition;
import robLANG_ASOS.Robot;
import robLANG_ASOS.Statement;
import robLANG_ASOS.services.RobLANGGrammarAccess;

@SuppressWarnings("all")
public class RobLANGFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RobLANGGrammarAccess _robLANGGrammarAccess;
  
  protected void _format(final Robot robot, @Extension final IFormattableDocument document) {
    EList<FunDefinition> _functions = robot.getFunctions();
    for (final FunDefinition funDefinition : _functions) {
      document.<FunDefinition>format(funDefinition);
    }
  }
  
  protected void _format(final Block block, @Extension final IFormattableDocument document) {
    EList<Statement> _statements = block.getStatements();
    for (final Statement statement : _statements) {
      document.<Statement>format(statement);
    }
  }
  
  public void format(final Object block, final IFormattableDocument document) {
    if (block instanceof XtextResource) {
      _format((XtextResource)block, document);
      return;
    } else if (block instanceof Block) {
      _format((Block)block, document);
      return;
    } else if (block instanceof Robot) {
      _format((Robot)block, document);
      return;
    } else if (block instanceof EObject) {
      _format((EObject)block, document);
      return;
    } else if (block == null) {
      _format((Void)null, document);
      return;
    } else if (block != null) {
      _format(block, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(block, document).toString());
    }
  }
}
